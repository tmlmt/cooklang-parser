import { createRegex } from "human-regex";

export const metadataRegex = createRegex()
  .literal("---").newline()
  .startCaptureGroup().anyCharacter().zeroOrMore().optional().endGroup()
  .newline().literal("---")
  .dotAll().toRegExp();

const nonWordChar = "\\s@#~\\[\\]{(.,;:!?"

const multiwordIngredient = createRegex()
  .literal("@")
  .startNamedGroup("mIngredientModifier")
    .anyOf("@\\-&?")
  .endGroup().optional()
  .startNamedGroup("mIngredientName")
    .notAnyOf(nonWordChar).oneOrMore()
    .startGroup()
      .whitespace().oneOrMore().notAnyOf(nonWordChar).oneOrMore()
    .endGroup().oneOrMore()
  .endGroup()
  .positiveLookahead("\\s*(?:\\{[^\\}]*\\}|\\([^)]*\\))")
  .startGroup()
    .literal("{")
    .startNamedGroup("mIngredientQuantity")
      .notAnyOf("}%").oneOrMore()
    .endGroup().optional()
    .startGroup()
      .literal("%")
      .startNamedGroup("mIngredientUnits")
        .notAnyOf("}").oneOrMore().lazy()
      .endGroup()
    .endGroup().optional()
    .literal("}")
  .endGroup().optional()
  .startGroup()
    .literal("(")
    .startNamedGroup("mIngredientPreparation")
      .notAnyOf(")").oneOrMore().lazy()
    .endGroup()
    .literal(")")
  .endGroup().optional()
  .toRegExp();

const singleWordIngredient = createRegex()
  .literal("@")
  .startNamedGroup("sIngredientModifier")
    .anyOf("@\\-&?")
  .endGroup().optional()
  .startNamedGroup("sIngredientName")
    .notAnyOf(nonWordChar).oneOrMore()
  .endGroup()
  .startGroup()
    .literal("{")
    .startNamedGroup("sIngredientQuantity")
      .notAnyOf("}%").oneOrMore()
    .endGroup().optional()
    .startGroup()
      .literal("%")
      .startNamedGroup("sIngredientUnits")
        .notAnyOf("}").oneOrMore().lazy()
      .endGroup()
    .endGroup().optional()
    .literal("}")
  .endGroup().optional()
  .startGroup()
    .literal("(")
    .startNamedGroup("sIngredientPreparation")
      .notAnyOf(")").oneOrMore().lazy()
    .endGroup()
    .literal(")")
  .endGroup().optional()
  .toRegExp();

export const ingredientAliasRegex = createRegex()
  .startAnchor()
  .startNamedGroup("ingredientListName")
    .notAnyOf("|").oneOrMore()
  .endGroup()
  .literal("|")
  .startNamedGroup("ingredientDisplayName")
    .notAnyOf("|").oneOrMore()
  .endGroup()
  .endAnchor()
  .toRegExp();

const multiwordCookware = createRegex()
  .literal("#")
  .startNamedGroup("mCookwareModifier")
    .anyOf("\\-&?")
  .endGroup().optional()
  .startNamedGroup("mCookwareName")
    .notAnyOf(nonWordChar).oneOrMore()
    .startGroup()
      .whitespace().oneOrMore().notAnyOf(nonWordChar).oneOrMore()
    .endGroup().oneOrMore()
  .endGroup().positiveLookahead("\\s*(?:\\{[^\\}]*\\})")
  .literal("{")
  .startNamedGroup("mCookwareQuantity")
    .anyCharacter().zeroOrMore().lazy()
  .endGroup()
  .literal("}")
  .toRegExp();

const singleWordCookware = createRegex()
  .literal("#")
  .startNamedGroup("sCookwareModifier")
    .anyOf("\\-&?")
  .endGroup().optional()
  .startNamedGroup("sCookwareName")
    .notAnyOf(nonWordChar).oneOrMore()
  .endGroup()
  .startGroup()
    .literal("{")
    .startNamedGroup("sCookwareQuantity")
      .anyCharacter().zeroOrMore().lazy()
    .endGroup()
    .literal("}")
  .endGroup().optional()
  .toRegExp();

const timer = createRegex()
  .literal("~")
  .startNamedGroup("timerName")
    .anyCharacter().zeroOrMore().lazy()
  .endGroup()
  .literal("{")
  .startNamedGroup("timerQuantity")
    .anyCharacter().oneOrMore().lazy()
  .endGroup()
  .startGroup()
    .literal("%")
    .startNamedGroup("timerUnits")
      .anyCharacter().oneOrMore().lazy()
    .endGroup()
  .endGroup().optional()
  .literal("}")
  .toRegExp()

export const tokensRegex = new RegExp(
  [
    multiwordIngredient,
    singleWordIngredient,
    multiwordCookware,
    singleWordCookware,
    timer,
  ]
    .map((r) => r.source)
    .join("|"),
  "gu",
);

export const commentRegex = createRegex()
  .literal("--")
  .anyCharacter().zeroOrMore()
  .global()
  .toRegExp();

export const blockCommentRegex = createRegex()
  .whitespace().zeroOrMore()
  .literal("[-")
  .anyCharacter().zeroOrMore().lazy()
  .literal("-]")
  .whitespace().zeroOrMore()
  .global()
  .toRegExp();

export const shoppingListRegex = createRegex()
  .literal("[")
  .startNamedGroup("name")
    .anyCharacter().oneOrMore()
  .endGroup()
  .literal("]")
  .newline()
  .startNamedGroup("items")
    .anyCharacter().zeroOrMore().lazy()
  .endGroup()
  .startGroup()
    .newline().newline()
      .or()
    .endAnchor()
  .endGroup()
  .global()
  .toRegExp()

export const rangeRegex = createRegex()
  .startAnchor()
  .digit().oneOrMore()
  .startGroup()
  .anyOf(".,/").exactly(1)
    .digit().oneOrMore()
  .endGroup().optional()
  .literal("-")
  .digit().oneOrMore()
  .startGroup()
    .anyOf(".,/").exactly(1)
    .digit().oneOrMore()
  .endGroup().optional()
  .endAnchor()
  .toRegExp()

export const numberLikeRegex = createRegex()
  .startAnchor()
  .digit().oneOrMore()
  .startGroup()
    .anyOf(".,/").exactly(1)
    .digit().oneOrMore()
  .endGroup().optional()
  .endAnchor()
  .toRegExp()